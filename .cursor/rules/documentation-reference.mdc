---
description: >
  Prioritize and adhere to official documentation and established patterns before implementing custom solutions.
globs:
  - "**/*"
alwaysApply: true
---

## Principle: Documentation-Driven Development

Before writing any code, always consult the relevant official documentation. The goal is to leverage built-in functionalities, established patterns, and best practices provided by the framework or library creators. Avoid "rolling your own" solutions for problems that are likely already solved.

## How to Use Documentation

1.  **Identify the Technology**: For any given task, identify the core technologies involved (e.g., Python, a specific library, a framework).
2.  **Find the Docs**: Use the provided links or search for the official documentation.
3.  **Search for Patterns**: Look for examples, tutorials, or API references related to the task.
4.  **Implement the Pattern**: Base your implementation on the documented approach.
5.  **Ask if Unsure**: If the documentation is unclear, ambiguous, or doesn't seem to cover the use case, ask for clarification rather than making assumptions.

## Key Documentation Hubs

### Model Context Protocol (MCP)

*   **Overview & Concepts**: https://modelcontextprotocol.io/
*   **Transports (including Streamable HTTP)**: https://modelcontextprotocol.io/docs/concepts/transports
*   **Python SDK (Servers & Clients)**: https://github.com/modelcontextprotocol/python-sdk

### AIBlock SDK

*   **GitHub (Source & API)**: https://github.com/AIBlockOfficial/2Way.py
*   **PyPI**: https://pypi.org/project/aiblock/

### Python

*   **Official Docs**: https://docs.python.org/3/
*   **Usage**: For core Python language features and standard library usage.
